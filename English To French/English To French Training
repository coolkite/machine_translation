{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/coolkite/machine_translation/blob/main/Eng_to_Fre_Translation_training.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "mqSLb8o5RMdk",
        "outputId": "635a8b1c-5da1-4288-ea86-2598b5dd11ea"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "--2023-03-27 17:55:52--  http://www.manythings.org/anki/fra-eng.zip\n",
            "Resolving www.manythings.org (www.manythings.org)... 173.254.30.110\n",
            "Connecting to www.manythings.org (www.manythings.org)|173.254.30.110|:80... connected.\n",
            "HTTP request sent, awaiting response... 200 OK\n",
            "Length: 7155035 (6.8M) [application/zip]\n",
            "Saving to: ‘fra-eng.zip’\n",
            "\n",
            "fra-eng.zip         100%[===================>]   6.82M  30.4MB/s    in 0.2s    \n",
            "\n",
            "2023-03-27 17:55:53 (30.4 MB/s) - ‘fra-eng.zip’ saved [7155035/7155035]\n",
            "\n"
          ]
        }
      ],
      "source": [
        "!wget http://www.manythings.org/anki/fra-eng.zip"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!wget https://github.com/lukysummer/Machine-Translation-Seq2Seq-Keras/blob/master/data/small_vocab_en\n",
        "!wget https://github.com/lukysummer/Machine-Translation-Seq2Seq-Keras/blob/master/data/small_vocab_fr"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "0Wt9EvrXZD_R",
        "outputId": "38138f03-20e9-4ebe-bbcc-0a26604b5a12"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "--2023-03-27 18:46:29--  https://github.com/lukysummer/Machine-Translation-Seq2Seq-Keras/blob/master/data/small_vocab_en\n",
            "Resolving github.com (github.com)... 140.82.113.3\n",
            "Connecting to github.com (github.com)|140.82.113.3|:443... connected.\n",
            "HTTP request sent, awaiting response... 200 OK\n",
            "Length: unspecified [text/html]\n",
            "Saving to: ‘small_vocab_en’\n",
            "\n",
            "small_vocab_en          [ <=>                ] 137.26K  --.-KB/s    in 0.07s   \n",
            "\n",
            "2023-03-27 18:46:30 (1.82 MB/s) - ‘small_vocab_en’ saved [140555]\n",
            "\n",
            "--2023-03-27 18:46:30--  https://github.com/lukysummer/Machine-Translation-Seq2Seq-Keras/blob/master/data/small_vocab_fr\n",
            "Resolving github.com (github.com)... 140.82.113.3\n",
            "Connecting to github.com (github.com)|140.82.113.3|:443... connected.\n",
            "HTTP request sent, awaiting response... 200 OK\n",
            "Length: unspecified [text/html]\n",
            "Saving to: ‘small_vocab_fr’\n",
            "\n",
            "small_vocab_fr          [ <=>                ] 137.26K  --.-KB/s    in 0.07s   \n",
            "\n",
            "2023-03-27 18:46:30 (1.80 MB/s) - ‘small_vocab_fr’ saved [140555]\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "v8TXidJfLy18",
        "outputId": "8a08705a-4093-4326-fcde-d82d535bca58"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "--2023-03-27 16:43:32--  https://huggingface.co/stanfordnlp/glove/resolve/main/glove.6B.zip\n",
            "Resolving huggingface.co (huggingface.co)... 35.173.225.216, 34.203.133.210, 52.2.178.255, ...\n",
            "Connecting to huggingface.co (huggingface.co)|35.173.225.216|:443... connected.\n",
            "HTTP request sent, awaiting response... 302 Found\n",
            "Location: https://cdn-lfs.huggingface.co/stanfordnlp/glove/6471382cdd837544bf3ac72497a38715e845897d265b2b424b4761832009c837?response-content-disposition=attachment%3B+filename*%3DUTF-8%27%27glove.6B.zip%3B+filename%3D%22glove.6B.zip%22%3B&response-content-type=application%2Fzip&Expires=1680194613&Policy=eyJTdGF0ZW1lbnQiOlt7IlJlc291cmNlIjoiaHR0cHM6Ly9jZG4tbGZzLmh1Z2dpbmdmYWNlLmNvL3N0YW5mb3JkbmxwL2dsb3ZlLzY0NzEzODJjZGQ4Mzc1NDRiZjNhYzcyNDk3YTM4NzE1ZTg0NTg5N2QyNjViMmI0MjRiNDc2MTgzMjAwOWM4Mzc%7EcmVzcG9uc2UtY29udGVudC1kaXNwb3NpdGlvbj0qJnJlc3BvbnNlLWNvbnRlbnQtdHlwZT0qIiwiQ29uZGl0aW9uIjp7IkRhdGVMZXNzVGhhbiI6eyJBV1M6RXBvY2hUaW1lIjoxNjgwMTk0NjEzfX19XX0_&Signature=h0Z84Gz9yazrpIaE83GZ%7EZkNQsZxwMhHD8dT3gTCPkNykSNbKZT0VFgOeIIjnpCwD5jfHsUDMz3rEK1HiymXs-AjWEoGD915Dz4YPjlHFDwfgmWE2a2hyzJvdJfmr09fWj9snCeZTDhRB3V7cHWCirUo1YiS3Jt0DBLEGGrwoTvDAmoc3%7ErGZI-m2JeUdlx1qb9Q0j0mUX-hghfLIJfK4qBdFdxFistp5I9dB1H-FFcP1cL2qu-Am8SqQzMpmPuOomnBTEj9YWYHbH8K-39E9k-P9PSDy7qykGe-9VOLMd%7ELLX3VU9n4hCUoQHgiOPb1UGJ--LeWxtHJcP3rYnHyHw__&Key-Pair-Id=KVTP0A1DKRTAX [following]\n",
            "--2023-03-27 16:43:32--  https://cdn-lfs.huggingface.co/stanfordnlp/glove/6471382cdd837544bf3ac72497a38715e845897d265b2b424b4761832009c837?response-content-disposition=attachment%3B+filename*%3DUTF-8%27%27glove.6B.zip%3B+filename%3D%22glove.6B.zip%22%3B&response-content-type=application%2Fzip&Expires=1680194613&Policy=eyJTdGF0ZW1lbnQiOlt7IlJlc291cmNlIjoiaHR0cHM6Ly9jZG4tbGZzLmh1Z2dpbmdmYWNlLmNvL3N0YW5mb3JkbmxwL2dsb3ZlLzY0NzEzODJjZGQ4Mzc1NDRiZjNhYzcyNDk3YTM4NzE1ZTg0NTg5N2QyNjViMmI0MjRiNDc2MTgzMjAwOWM4Mzc%7EcmVzcG9uc2UtY29udGVudC1kaXNwb3NpdGlvbj0qJnJlc3BvbnNlLWNvbnRlbnQtdHlwZT0qIiwiQ29uZGl0aW9uIjp7IkRhdGVMZXNzVGhhbiI6eyJBV1M6RXBvY2hUaW1lIjoxNjgwMTk0NjEzfX19XX0_&Signature=h0Z84Gz9yazrpIaE83GZ%7EZkNQsZxwMhHD8dT3gTCPkNykSNbKZT0VFgOeIIjnpCwD5jfHsUDMz3rEK1HiymXs-AjWEoGD915Dz4YPjlHFDwfgmWE2a2hyzJvdJfmr09fWj9snCeZTDhRB3V7cHWCirUo1YiS3Jt0DBLEGGrwoTvDAmoc3%7ErGZI-m2JeUdlx1qb9Q0j0mUX-hghfLIJfK4qBdFdxFistp5I9dB1H-FFcP1cL2qu-Am8SqQzMpmPuOomnBTEj9YWYHbH8K-39E9k-P9PSDy7qykGe-9VOLMd%7ELLX3VU9n4hCUoQHgiOPb1UGJ--LeWxtHJcP3rYnHyHw__&Key-Pair-Id=KVTP0A1DKRTAX\n",
            "Resolving cdn-lfs.huggingface.co (cdn-lfs.huggingface.co)... 13.249.85.12, 13.249.85.23, 13.249.85.116, ...\n",
            "Connecting to cdn-lfs.huggingface.co (cdn-lfs.huggingface.co)|13.249.85.12|:443... connected.\n",
            "HTTP request sent, awaiting response... 200 OK\n",
            "Length: 862182753 (822M) [application/zip]\n",
            "Saving to: ‘glove.6B.zip’\n",
            "\n",
            "glove.6B.zip        100%[===================>] 822.24M  88.1MB/s    in 9.6s    \n",
            "\n",
            "2023-03-27 16:43:42 (85.8 MB/s) - ‘glove.6B.zip’ saved [862182753/862182753]\n",
            "\n"
          ]
        }
      ],
      "source": [
        "!wget https://huggingface.co/stanfordnlp/glove/resolve/main/glove.6B.zip"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "njVAcjDZRWc2",
        "outputId": "555e129e-56ed-42b4-9436-491b9b487ebb"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Archive:  /content/fra-eng.zip\n",
            "replace _about.txt? [y]es, [n]o, [A]ll, [N]one, [r]ename: A\n",
            "  inflating: _about.txt              \n",
            "  inflating: fra.txt                 \n"
          ]
        }
      ],
      "source": [
        "!unzip \"/content/fra-eng.zip\""
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "5NeYCxYpL7Fr",
        "outputId": "58f8dc9e-43ce-4995-9b08-cb2bb33c4d9c"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Archive:  /content/glove.6B.zip\n",
            "  inflating: glove.6B.100d.txt       \n",
            "  inflating: glove.6B.200d.txt       \n",
            "  inflating: glove.6B.300d.txt       \n",
            "  inflating: glove.6B.50d.txt        \n"
          ]
        }
      ],
      "source": [
        "!unzip \"/content/glove.6B.zip\""
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "DYLYhxIfUAQ-"
      },
      "outputs": [],
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "from tensorflow import keras\n",
        "from keras.preprocessing import *\n",
        "from keras.models import Model\n",
        "from keras.layers import *\n",
        "from keras.utils import *\n",
        "from tqdm import tqdm\n",
        "from sklearn.model_selection import train_test_split\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "If32k3f_73ej",
        "outputId": "82789c29-db8a-418c-ddf3-e7cb8b0d252c"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Running on TPU  grpc://10.0.149.10:8470\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "WARNING:absl:`tf.distribute.experimental.TPUStrategy` is deprecated, please use  the non experimental symbol `tf.distribute.TPUStrategy` instead.\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "REPLICAS:  8\n"
          ]
        }
      ],
      "source": [
        "# Detect hardware, return appropriate distribution strategy\n",
        "try:\n",
        "    # TPU detection. No parameters necessary if TPU_NAME environment variable is\n",
        "    # set: this is always the case on Kaggle.\n",
        "    tpu = tf.distribute.cluster_resolver.TPUClusterResolver()\n",
        "    print('Running on TPU ', tpu.master())\n",
        "except ValueError:\n",
        "    tpu = None\n",
        "\n",
        "if tpu:\n",
        "    tf.config.experimental_connect_to_cluster(tpu)\n",
        "    tf.tpu.experimental.initialize_tpu_system(tpu)\n",
        "    strategy = tf.distribute.experimental.TPUStrategy(tpu)\n",
        "else:\n",
        "    # Default distribution strategy in Tensorflow. Works on CPU and single GPU.\n",
        "    strategy = tf.distribute.get_strategy()\n",
        "\n",
        "print(\"REPLICAS: \", strategy.num_replicas_in_sync)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "YoRz3rpjSI1K",
        "outputId": "fb4bf5ab-573e-4973-c447-05553e4079c6"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "(139635,) (139635,)\n",
            "Who?\n",
            "¿Quién?\n"
          ]
        }
      ],
      "source": [
        "# df = pd.read_csv(\"/content/spa.txt\", sep='\\t')\n",
        "\n",
        "# encoder_train = df.iloc[:,0].to_numpy()\n",
        "# decoder_train = df.iloc[:,1].to_numpy()\n",
        "# print(encoder_train.shape, decoder_train.shape)\n",
        "# print(encoder_train[11])\n",
        "# print(decoder_train[11])"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "with open('/content/small_vocab_en', 'r') as f:\n",
        "    encoder_train = f.read().split('\\n')\n",
        "    \n",
        "with open('/content/small_vocab_fr', 'r') as f:\n",
        "    decoder_train = f.read().split('\\n')"
      ],
      "metadata": {
        "id": "2I_s1xxjZA0p"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "for sample_i in range(2):\n",
        "    print('English Sentence {} :  {}'.format(sample_i+1, encoder_train[sample_i]))\n",
        "    print('French Sentence {}  :  {}\\n'.format(sample_i+1, decoder_train[sample_i]))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "S8q9y7RoaorY",
        "outputId": "de99f3d2-eadd-41bf-f978-b0609b674986"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "English Sentence 1 :  new jersey is sometimes quiet during autumn , and it is snowy in april .\n",
            "French Sentence 1  :  new jersey est parfois calme pendant l' automne , et il est neigeux en avril .\n",
            "\n",
            "English Sentence 2 :  the united states is usually chilly during july , and it is usually freezing in november .\n",
            "French Sentence 2  :  les états-unis est généralement froid en juillet , et il gèle habituellement en novembre .\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "eOyIS0VhaQ6p"
      },
      "outputs": [],
      "source": [
        "def tokenize(dataset):\n",
        "  dataset = [\"<BOS> \" + train + \" <EOS>\" for train in dataset]\n",
        "  token = text.Tokenizer(num_words = None)\n",
        "  token.fit_on_texts(dataset)\n",
        "  dataset = token.texts_to_sequences(dataset)\n",
        "  return dataset, token.word_index\n",
        "\n",
        "def padding(dataset):\n",
        "  max_length = max([len(text) for text in dataset])\n",
        "  dataset = pad_sequences(dataset, maxlen=max_length, padding = 'post', truncating = 'post')\n",
        "  return max_length, dataset"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "0ta7B9DuBXCQ",
        "outputId": "6117b4d2-8e17-4ff6-eb9b-4620afa83dda"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[2, 28, 129, 102, 113, 114, 103, 3]\n",
            "[  2  28 129 102 113 114 103   3   0   0   0   0   0   0   0   0   0]\n",
            "17\n",
            "[  2   5 120 151 146 185 112 135   3   0   0   0   0   0   0   0   0   0\n",
            "   0   0   0   0   0]\n",
            "23\n",
            "{'is': 1, 'bos': 2, 'eos': 3, 'in': 4, 'it': 5, 'during': 6, 'the': 7, 'but': 8, 'and': 9, 'sometimes': 10, 'usually': 11, 'never': 12, 'favorite': 13, 'least': 14, 'fruit': 15, 'most': 16, 'loved': 17, 'liked': 18, 'new': 19, 'paris': 20, 'india': 21, 'united': 22, 'states': 23, 'california': 24, 'jersey': 25, 'france': 26, 'china': 27, 'he': 28, 'she': 29, 'grapefruit': 30, 'your': 31, 'my': 32, 'his': 33, 'her': 34, 'fall': 35, 'june': 36, 'spring': 37, 'january': 38, 'winter': 39, 'march': 40, 'autumn': 41, 'may': 42, 'nice': 43, 'september': 44, 'july': 45, 'april': 46, 'november': 47, 'summer': 48, 'december': 49, 'february': 50, 'our': 51, 'their': 52, 'freezing': 53, 'pleasant': 54, 'beautiful': 55, 'october': 56, 'snowy': 57, 'warm': 58, 'cold': 59, 'wonderful': 60, 'dry': 61, 'busy': 62, 'august': 63, 'chilly': 64, 'rainy': 65, 'mild': 66, 'wet': 67, 'relaxing': 68, 'quiet': 69, 'hot': 70, 'dislikes': 71, 'likes': 72, 'limes': 73, 'lemons': 74, 'grapes': 75, 'mangoes': 76, 'apples': 77, 'peaches': 78, 'oranges': 79, 'pears': 80, 'strawberries': 81, 'bananas': 82, 'to': 83, 'grape': 84, 'apple': 85, 'orange': 86, 'lemon': 87, 'lime': 88, 'banana': 89, 'mango': 90, 'pear': 91, 'strawberry': 92, 'peach': 93, 'like': 94, 'dislike': 95, 'they': 96, 'that': 97, 'i': 98, 'we': 99, 'you': 100, 'animal': 101, 'a': 102, 'truck': 103, 'car': 104, 'automobile': 105, 'was': 106, 'next': 107, 'go': 108, 'driving': 109, 'visit': 110, 'little': 111, 'big': 112, 'old': 113, 'yellow': 114, 'red': 115, 'rusty': 116, 'blue': 117, 'white': 118, 'black': 119, 'green': 120, 'shiny': 121, 'are': 122, 'last': 123, 'feared': 124, 'animals': 125, 'this': 126, 'plan': 127, 'going': 128, 'saw': 129, 'disliked': 130, 'drives': 131, 'drove': 132, 'between': 133, 'translate': 134, 'plans': 135, 'were': 136, 'went': 137, 'might': 138, 'wanted': 139, 'thinks': 140, 'spanish': 141, 'portuguese': 142, 'chinese': 143, 'english': 144, 'french': 145, 'translating': 146, 'difficult': 147, 'fun': 148, 'easy': 149, 'wants': 150, 'think': 151, 'why': 152, \"it's\": 153, 'did': 154, 'cat': 155, 'shark': 156, 'bird': 157, 'mouse': 158, 'horse': 159, 'elephant': 160, 'dog': 161, 'monkey': 162, 'lion': 163, 'bear': 164, 'rabbit': 165, 'snake': 166, 'when': 167, 'want': 168, 'do': 169, 'how': 170, 'elephants': 171, 'horses': 172, 'dogs': 173, 'sharks': 174, 'snakes': 175, 'cats': 176, 'rabbits': 177, 'monkeys': 178, 'bears': 179, 'birds': 180, 'lions': 181, 'mice': 182, \"didn't\": 183, 'eiffel': 184, 'tower': 185, 'grocery': 186, 'store': 187, 'football': 188, 'field': 189, 'lake': 190, 'school': 191, 'would': 192, \"aren't\": 193, 'been': 194, 'weather': 195, 'does': 196, 'has': 197, \"isn't\": 198, 'am': 199, 'where': 200, 'have': 201}\n"
          ]
        }
      ],
      "source": [
        "import pickle\n",
        "\n",
        "encoder_train, enc_dict = tokenize(encoder_train)\n",
        "decoder_train, dec_dict = tokenize(decoder_train)\n",
        "print(encoder_train[11])\n",
        "\n",
        "max_enc_seq_length, enc_train_pad = padding(encoder_train)\n",
        "max_dec_seq_length, dec_train_pad = padding(decoder_train)\n",
        "print(enc_train_pad[11])\n",
        "print(max_enc_seq_length)\n",
        "print(dec_train_pad[11])\n",
        "print(max_dec_seq_length)\n",
        "\n",
        "print(enc_dict)\n",
        "\n",
        "with open('engTokenizer.pickle', 'wb') as handle:\n",
        "    pickle.dump(enc_dict, handle, protocol=pickle.HIGHEST_PROTOCOL)\n",
        "\n",
        "with open('freTokenizer.pickle', 'wb') as handle:\n",
        "    pickle.dump(dec_dict, handle, protocol=pickle.HIGHEST_PROTOCOL)\n",
        "\n",
        "print()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Gp_EitZ3LWtY",
        "outputId": "2ca57221-057c-4992-e5a0-40ff0710a0ab"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "400001it [00:32, 12293.75it/s]\n"
          ]
        }
      ],
      "source": [
        "embeddings_index = {}\n",
        "f = open('/content/glove.6B.300d.txt')\n",
        "for line in tqdm(f):\n",
        "    values = line.split()\n",
        "    word = values[0]\n",
        "    coefs = np.asarray(values[1:], dtype='float32')\n",
        "    embeddings_index[word] = coefs\n",
        "f.close()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "NXJoEzcgQKEj"
      },
      "outputs": [],
      "source": [
        "def Glove(latentDim, dictionary):\n",
        "  embedding_matrix = np.zeros((len(dictionary) + 1, latentDim))\n",
        "  for word, i in tqdm(dictionary.items()):\n",
        "      embedding_vector = embeddings_index.get(word)\n",
        "      if embedding_vector is not None:\n",
        "          embedding_matrix[i] = embedding_vector\n",
        "  \n",
        "  return embedding_matrix\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "W2pHrXXI8QCs",
        "outputId": "fc9a8574-1410-45e0-8dd3-fcf800ada2d3"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "100%|██████████| 201/201 [00:00<00:00, 60055.21it/s]\n",
            "100%|██████████| 346/346 [00:00<00:00, 130143.41it/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model: \"model_17\"\n",
            "__________________________________________________________________________________________________\n",
            " Layer (type)                   Output Shape         Param #     Connected to                     \n",
            "==================================================================================================\n",
            " input_35 (InputLayer)          [(None, 17)]         0           []                               \n",
            "                                                                                                  \n",
            " input_36 (InputLayer)          [(None, 23)]         0           []                               \n",
            "                                                                                                  \n",
            " embedding_34 (Embedding)       (None, 17, 300)      60600       ['input_35[0][0]']               \n",
            "                                                                                                  \n",
            " embedding_35 (Embedding)       (None, 23, 300)      104100      ['input_36[0][0]']               \n",
            "                                                                                                  \n",
            " gru_34 (GRU)                   [(None, 300),        541800      ['embedding_34[0][0]']           \n",
            "                                 (None, 300)]                                                     \n",
            "                                                                                                  \n",
            " gru_35 (GRU)                   [(None, 23, 300),    541800      ['embedding_35[0][0]',           \n",
            "                                 (None, 300)]                     'gru_34[0][1]']                 \n",
            "                                                                                                  \n",
            " time_distributed_17 (TimeDistr  (None, 23, 346)     104146      ['gru_35[0][0]']                 \n",
            " ibuted)                                                                                          \n",
            "                                                                                                  \n",
            "==================================================================================================\n",
            "Total params: 1,352,446\n",
            "Trainable params: 1,187,746\n",
            "Non-trainable params: 164,700\n",
            "__________________________________________________________________________________________________\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<IPython.core.display.Image object>"
            ]
          },
          "metadata": {},
          "execution_count": 107
        }
      ],
      "source": [
        "latentDim = 300\n",
        "UNIQUE_ENC_WORDS = len(enc_dict)\n",
        "UNIQUE_DEC_WORDS = len(dec_dict)\n",
        "\n",
        "with strategy.scope():\n",
        "  encoder_input = Input(shape=(max_enc_seq_length,))\n",
        "  encoder_layer = GRU(latentDim, return_state=True)\n",
        "  encoder_embed = Embedding(UNIQUE_ENC_WORDS+1, latentDim, weights = [Glove(latentDim, enc_dict)], input_length=max_enc_seq_length, trainable = False)(encoder_input)\n",
        "  #encoder_embed = Embedding(UNIQUE_ENC_WORDS+1, latentDim, input_length=max_enc_seq_length)(encoder_input)\n",
        "  encoder_output, encoder_hidden = encoder_layer(encoder_embed)\n",
        "\n",
        "  decoder_input = Input(shape = (max_dec_seq_length,))\n",
        "  decoder_embed = Embedding(UNIQUE_DEC_WORDS+1, latentDim, weights = [Glove(latentDim, dec_dict)], input_length=max_dec_seq_length, trainable = False)(decoder_input)\n",
        "  #decoder_embed = Embedding(UNIQUE_DEC_WORDS+1, latentDim, input_length=max_dec_seq_length)(decoder_input)\n",
        "\n",
        "  decoder_layer = GRU(latentDim, return_sequences=True, return_state=True)\n",
        "  decoder_output, _ = decoder_layer(decoder_embed, initial_state = encoder_hidden)\n",
        "\n",
        "  output_layer = TimeDistributed(Dense(UNIQUE_DEC_WORDS, activation=\"softmax\"))(decoder_output)\n",
        "\n",
        "  model = Model([encoder_input, decoder_input], output_layer)\n",
        "  model.summary()\n",
        "  model.compile(optimizer=keras.optimizers.Adam(learning_rate=0.002), loss=\"sparse_categorical_crossentropy\", metrics=[\"accuracy\"])\n",
        "\n",
        "plot_model(model, to_file='model.png', show_shapes=True)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "UOXrBoMWXZSz"
      },
      "outputs": [],
      "source": [
        "decoder_target = [np.append(arr[1:],0) for arr in dec_train_pad]\n",
        "decoder_target = np.array(decoder_target)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "5XCn0Z2CAScc",
        "outputId": "234db341-096f-4c39-9be2-9e6a9e1692ca"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "(137860, 17) (137860, 23) (137860, 23)\n",
            "[ 2  7 86  1 34 13 15  8  7 89  1 31 13  3  0  0  0] [ 2 86  1 22 18 19  7  9 89  1 42 95  3  0  0  0  0  0  0  0  0  0  0] [86  1 22 18 19  7  9 89  1 42 95  3  0  0  0  0  0  0  0  0  0  0  0]\n"
          ]
        }
      ],
      "source": [
        "print(enc_train_pad.shape, dec_train_pad.shape, decoder_target.shape)\n",
        "print(enc_train_pad[137859], dec_train_pad[137859], decoder_target[137859])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "x9-25YAJ6sf1",
        "outputId": "f901cd2e-b872-464f-9d84-3929a569e2cc"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/100\n",
            "95/95 [==============================] - 20s 120ms/step - loss: 1.3077 - accuracy: 0.6900 - val_loss: nan - val_accuracy: 0.7910\n",
            "Epoch 2/100\n",
            "95/95 [==============================] - 4s 45ms/step - loss: 0.5336 - accuracy: 0.8247 - val_loss: nan - val_accuracy: 0.8597\n",
            "Epoch 3/100\n",
            "95/95 [==============================] - 4s 43ms/step - loss: 0.3465 - accuracy: 0.8864 - val_loss: nan - val_accuracy: 0.9112\n",
            "Epoch 4/100\n",
            "95/95 [==============================] - 4s 43ms/step - loss: 0.2137 - accuracy: 0.9323 - val_loss: nan - val_accuracy: 0.9511\n",
            "Epoch 5/100\n",
            "95/95 [==============================] - 4s 43ms/step - loss: 0.1230 - accuracy: 0.9633 - val_loss: nan - val_accuracy: 0.9666\n",
            "Epoch 6/100\n",
            "95/95 [==============================] - 4s 43ms/step - loss: 0.0762 - accuracy: 0.9786 - val_loss: nan - val_accuracy: 0.9838\n",
            "Epoch 7/100\n",
            "95/95 [==============================] - 5s 54ms/step - loss: 0.0485 - accuracy: 0.9879 - val_loss: nan - val_accuracy: 0.9904\n",
            "Epoch 8/100\n",
            "95/95 [==============================] - 4s 45ms/step - loss: 0.0450 - accuracy: 0.9883 - val_loss: nan - val_accuracy: 0.9912\n",
            "Epoch 9/100\n",
            "95/95 [==============================] - 4s 45ms/step - loss: 0.0276 - accuracy: 0.9930 - val_loss: nan - val_accuracy: 0.9931\n",
            "Epoch 10/100\n",
            "95/95 [==============================] - 4s 44ms/step - loss: 0.0222 - accuracy: 0.9942 - val_loss: nan - val_accuracy: 0.9937\n",
            "Epoch 11/100\n",
            "95/95 [==============================] - 4s 43ms/step - loss: 0.0192 - accuracy: 0.9949 - val_loss: nan - val_accuracy: 0.9944\n",
            "Epoch 12/100\n",
            "95/95 [==============================] - 4s 47ms/step - loss: 0.0166 - accuracy: 0.9957 - val_loss: nan - val_accuracy: 0.9948\n",
            "Epoch 13/100\n",
            "95/95 [==============================] - 4s 44ms/step - loss: 0.0147 - accuracy: 0.9961 - val_loss: nan - val_accuracy: 0.9954\n",
            "Epoch 14/100\n",
            "95/95 [==============================] - 4s 44ms/step - loss: 0.0130 - accuracy: 0.9966 - val_loss: nan - val_accuracy: 0.9954\n",
            "Epoch 15/100\n",
            "95/95 [==============================] - 4s 47ms/step - loss: 0.0230 - accuracy: 0.9934 - val_loss: nan - val_accuracy: 0.9956\n",
            "Epoch 16/100\n",
            "95/95 [==============================] - 4s 44ms/step - loss: 0.0114 - accuracy: 0.9971 - val_loss: nan - val_accuracy: 0.9961\n",
            "Epoch 17/100\n",
            "95/95 [==============================] - 4s 44ms/step - loss: 0.0100 - accuracy: 0.9975 - val_loss: nan - val_accuracy: 0.9963\n",
            "Epoch 18/100\n",
            "95/95 [==============================] - 4s 47ms/step - loss: 0.0089 - accuracy: 0.9978 - val_loss: nan - val_accuracy: 0.9963\n",
            "Epoch 19/100\n",
            "95/95 [==============================] - 4s 44ms/step - loss: 0.0081 - accuracy: 0.9980 - val_loss: nan - val_accuracy: 0.9966\n",
            "Epoch 20/100\n",
            "95/95 [==============================] - 4s 43ms/step - loss: 0.0076 - accuracy: 0.9981 - val_loss: nan - val_accuracy: 0.9968\n",
            "Epoch 21/100\n",
            "95/95 [==============================] - 4s 44ms/step - loss: 0.0067 - accuracy: 0.9983 - val_loss: nan - val_accuracy: 0.9970\n",
            "Epoch 22/100\n",
            "95/95 [==============================] - 4s 43ms/step - loss: 0.0063 - accuracy: 0.9984 - val_loss: nan - val_accuracy: 0.9970\n",
            "Epoch 23/100\n",
            "95/95 [==============================] - 4s 43ms/step - loss: 0.0059 - accuracy: 0.9985 - val_loss: nan - val_accuracy: 0.9968\n",
            "Epoch 24/100\n",
            "95/95 [==============================] - 4s 44ms/step - loss: 0.0054 - accuracy: 0.9986 - val_loss: nan - val_accuracy: 0.9972\n",
            "Epoch 25/100\n",
            "95/95 [==============================] - 4s 46ms/step - loss: 0.0050 - accuracy: 0.9988 - val_loss: nan - val_accuracy: 0.9971\n",
            "Epoch 26/100\n",
            "95/95 [==============================] - 4s 43ms/step - loss: 0.0047 - accuracy: 0.9988 - val_loss: nan - val_accuracy: 0.9971\n",
            "Epoch 27/100\n",
            "95/95 [==============================] - 4s 43ms/step - loss: 0.0045 - accuracy: 0.9989 - val_loss: nan - val_accuracy: 0.9973\n",
            "Epoch 28/100\n",
            "95/95 [==============================] - 4s 46ms/step - loss: 0.0044 - accuracy: 0.9988 - val_loss: nan - val_accuracy: 0.9969\n",
            "Epoch 29/100\n",
            "95/95 [==============================] - 4s 44ms/step - loss: 0.0040 - accuracy: 0.9990 - val_loss: nan - val_accuracy: 0.9970\n",
            "Epoch 30/100\n",
            "95/95 [==============================] - 4s 44ms/step - loss: 0.0039 - accuracy: 0.9990 - val_loss: nan - val_accuracy: 0.9973\n",
            "Epoch 31/100\n",
            "95/95 [==============================] - 5s 48ms/step - loss: 0.0035 - accuracy: 0.9991 - val_loss: nan - val_accuracy: 0.9973\n",
            "Epoch 32/100\n",
            "95/95 [==============================] - 4s 44ms/step - loss: 0.0031 - accuracy: 0.9992 - val_loss: nan - val_accuracy: 0.9972\n",
            "Epoch 33/100\n",
            "95/95 [==============================] - 4s 43ms/step - loss: 0.0031 - accuracy: 0.9992 - val_loss: nan - val_accuracy: 0.9973\n",
            "Epoch 34/100\n",
            "95/95 [==============================] - 4s 44ms/step - loss: 0.0032 - accuracy: 0.9992 - val_loss: nan - val_accuracy: 0.9972\n",
            "Epoch 35/100\n",
            "95/95 [==============================] - 4s 45ms/step - loss: 0.0034 - accuracy: 0.9991 - val_loss: nan - val_accuracy: 0.9971\n",
            "Epoch 36/100\n",
            "95/95 [==============================] - 4s 44ms/step - loss: 0.0030 - accuracy: 0.9992 - val_loss: nan - val_accuracy: 0.9974\n",
            "Epoch 37/100\n",
            "95/95 [==============================] - 4s 43ms/step - loss: 0.0030 - accuracy: 0.9992 - val_loss: nan - val_accuracy: 0.9974\n",
            "Epoch 38/100\n",
            "95/95 [==============================] - 4s 47ms/step - loss: 0.0025 - accuracy: 0.9994 - val_loss: nan - val_accuracy: 0.9973\n",
            "Epoch 39/100\n",
            "95/95 [==============================] - 4s 44ms/step - loss: 0.0024 - accuracy: 0.9994 - val_loss: nan - val_accuracy: 0.9973\n",
            "Epoch 40/100\n",
            "95/95 [==============================] - 4s 44ms/step - loss: 0.0028 - accuracy: 0.9993 - val_loss: nan - val_accuracy: 0.9973\n",
            "Epoch 41/100\n",
            "95/95 [==============================] - 4s 47ms/step - loss: 0.0436 - accuracy: 0.9889 - val_loss: nan - val_accuracy: 0.9947\n",
            "Epoch 42/100\n",
            "95/95 [==============================] - 4s 43ms/step - loss: 0.0072 - accuracy: 0.9981 - val_loss: nan - val_accuracy: 0.9969\n"
          ]
        }
      ],
      "source": [
        "history = model.fit([enc_train_pad, dec_train_pad], \n",
        "                    decoder_target, \n",
        "                    batch_size = 128*strategy.num_replicas_in_sync,\n",
        "                    epochs = 100,\n",
        "                    validation_split = 0.3,\n",
        "                    callbacks = [tf.keras.callbacks.EarlyStopping(monitor='loss', patience=3)],\n",
        "                    shuffle = True\n",
        "                    )"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "model.save(\"engToFrenchSmallDataset.h5\")"
      ],
      "metadata": {
        "id": "xwbUDT9ReWPq"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "x1BbQQQknYTL"
      },
      "execution_count": null,
      "outputs": []
    }
  ],
  "metadata": {
    "accelerator": "TPU",
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyMN3CtfQmXuhX6VPm//MI6O",
      "include_colab_link": true
    },
    "gpuClass": "standard",
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}
